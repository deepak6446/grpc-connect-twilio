// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: otp/v1/otp.proto

package otpv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	v1 "otp-service/gen/otp/v1"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// OtpServiceName is the fully-qualified name of the OtpService service.
	OtpServiceName = "otp.v1.OtpService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OtpServiceVerifyPhoneNumberProcedure is the fully-qualified name of the OtpService's
	// VerifyPhoneNumber RPC.
	OtpServiceVerifyPhoneNumberProcedure = "/otp.v1.OtpService/VerifyPhoneNumber"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	otpServiceServiceDescriptor                 = v1.File_otp_v1_otp_proto.Services().ByName("OtpService")
	otpServiceVerifyPhoneNumberMethodDescriptor = otpServiceServiceDescriptor.Methods().ByName("VerifyPhoneNumber")
)

// OtpServiceClient is a client for the otp.v1.OtpService service.
type OtpServiceClient interface {
	// Generate a randomized OTP using Twilio's API.
	VerifyPhoneNumber(context.Context, *connect.Request[v1.VerifyPhoneNumberRequest]) (*connect.Response[v1.VerifyPhoneNumberResponse], error)
}

// NewOtpServiceClient constructs a client for the otp.v1.OtpService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOtpServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OtpServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &otpServiceClient{
		verifyPhoneNumber: connect.NewClient[v1.VerifyPhoneNumberRequest, v1.VerifyPhoneNumberResponse](
			httpClient,
			baseURL+OtpServiceVerifyPhoneNumberProcedure,
			connect.WithSchema(otpServiceVerifyPhoneNumberMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// otpServiceClient implements OtpServiceClient.
type otpServiceClient struct {
	verifyPhoneNumber *connect.Client[v1.VerifyPhoneNumberRequest, v1.VerifyPhoneNumberResponse]
}

// VerifyPhoneNumber calls otp.v1.OtpService.VerifyPhoneNumber.
func (c *otpServiceClient) VerifyPhoneNumber(ctx context.Context, req *connect.Request[v1.VerifyPhoneNumberRequest]) (*connect.Response[v1.VerifyPhoneNumberResponse], error) {
	return c.verifyPhoneNumber.CallUnary(ctx, req)
}

// OtpServiceHandler is an implementation of the otp.v1.OtpService service.
type OtpServiceHandler interface {
	// Generate a randomized OTP using Twilio's API.
	VerifyPhoneNumber(context.Context, *connect.Request[v1.VerifyPhoneNumberRequest]) (*connect.Response[v1.VerifyPhoneNumberResponse], error)
}

// NewOtpServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOtpServiceHandler(svc OtpServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	otpServiceVerifyPhoneNumberHandler := connect.NewUnaryHandler(
		OtpServiceVerifyPhoneNumberProcedure,
		svc.VerifyPhoneNumber,
		connect.WithSchema(otpServiceVerifyPhoneNumberMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/otp.v1.OtpService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OtpServiceVerifyPhoneNumberProcedure:
			otpServiceVerifyPhoneNumberHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOtpServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOtpServiceHandler struct{}

func (UnimplementedOtpServiceHandler) VerifyPhoneNumber(context.Context, *connect.Request[v1.VerifyPhoneNumberRequest]) (*connect.Response[v1.VerifyPhoneNumberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otp.v1.OtpService.VerifyPhoneNumber is not implemented"))
}
