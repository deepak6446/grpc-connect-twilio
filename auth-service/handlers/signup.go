package handlers

import (
	"context"
	"errors"
	"fmt"
	"net/http"

	authv1 "auth-service/gen/auth/v1"                        // generated by protoc-gen-go
	otpv1 "auth-service/gen/external/v1"                     // generated by protoc-gen-go
	otpv1connect "auth-service/gen/external/v1/otpv1connect" // generated by protoc-gen-go

	"auth-service/database"

	"connectrpc.com/connect"
)

// SignupWithPhoneNumber handles user signup with phone number
func (s *AuthServer) SignupWithPhoneNumber(
	ctx context.Context,
	req *connect.Request[authv1.SignupRequest],
) (*connect.Response[authv1.SignupResponse], error) {
	// Check if phone number is provided
	if req.Msg.PhoneNumber == "" {
		return nil, errors.New("phone number is mandatory")
	}

	// Get OTP
	otp, err := getOtp(req.Msg.PhoneNumber)
	if err != nil {
		fmt.Println("Error getting OTP: ", err)
		return nil, err
	}

	// Save signup data along with OTP
	err = database.SaveSignupData(req.Msg, otp)
	if err != nil {
		fmt.Println("Error saving signup data: ", err)
		return nil, err
	}

	// Create response
	res := connect.NewResponse(&authv1.SignupResponse{
		Success: true,
		Message: "signup success",
	})
	res.Header().Set("Auth-Version", "v1")
	return res, nil
}

// getOtp gets OTP for the provided phone number
func getOtp(phoneNumber string) (string, error) {
	// Initialize OTP service client
	client := otpv1connect.NewOtpServiceClient(http.DefaultClient, "http://localhost:8081")

	// Make gRPC call to get OTP
	res, err := client.VerifyPhoneNumber(context.Background(), connect.NewRequest(&otpv1.VerifyPhoneNumberRequest{PhoneNumber: phoneNumber}))
	if err != nil {
		return "", err
	}

	return res.Msg.Otp, nil
}
